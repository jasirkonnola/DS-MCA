program 1 :-C program to find the sum of 'n' numbers.
roll no:-23
name :-Jasir Hassan K

#include<stdio.h>
int main()
{
	int a[10],n,i,j,sum=0;
	printf("enter the size:");
	scanf("%d",&n);
	printf("Enter the elements:");
	for(i=0;i<=n-1;i++)
		{
		scanf("%d",&a[i]);
		}
	for(j=0;j<=n-1;j++)
		{ 
		sum=sum+a[j];
		}
	printf("sum = %d \n",sum);
	return(0);
}

program 2 :-C program to merge two sorted arrays.
roll no:-23
name :-Jasir Hassan K

#include<stdio.h>
void sortArray(int arr[],int size)
{
	int j, k ,temp;
	for(j=0;j<=size-1;j++)
	{   
		for(k=j+1;k<=size-1;k++)
 		{
 			if(arr[j]>arr[k])
 			{
 				temp=arr[j];
 				arr[j]=arr[k];
 				arr[k]=temp;
 			}
 		}
	}
}
int main()
{
	int n,m,i,j,k,temp,a[100],c[200],b[100];
	printf("\n enter 1st your array limit : ");
 	scanf("%d",&n);
 	printf("\n enter 1st array elements : ");
	for(i=0;i<=n-1;i++)
	{
 		scanf("%d",&a[i]);
	}
	printf("\n first array : ");
	for(i=0;i<=n-1;i++)
	{
		printf("  %d  " , a[i]);
	}
	sortArray(a,n);
	printf("\n sorted 1starray : ");
	for(i=0;i<=n-1;i++)
	{
  		printf("  %d  ",a[i]);
	}
	printf("\n enter 2ndd your array limit : ");
	scanf("%d",&m);
	printf("\n enter 2nd array elements : ");
	for(j=0;j<=m-1;j++)
 	{
 		scanf("%d",&b[j]);
 	}
 	printf("\n second array : ");
 	for(j=0;j<=m-1;j++)
 	{
 		printf("  %d  " , b[j]);
 	}
 	sortArray(b,m);
 	printf("\n sorted 2ndarray : ");
 	for(j=0;j<=m-1;j++)
 	{
 		printf("  %d  ",b[j]);
 	}
 	//merging started
 	for(i=0;i<=n-1;i++)
 	{
	
 		c[i]=a[i];
 	}
 	for(j=0;j<=(n+m)-1;j++)
 	{
 		c[i+j]=b[j];
 	}
 	printf("\n merged array : ");
 	for(k=0;k<=(m+n)-1;k++)	
 	{
 		printf("  %d  ",c[k]);
	}
 	for(k=0;k<=(m+n)-1;k++)
 	sortArray(c,m+n);
 	printf("\n sorted mergedarray : ");
 	for(j=0;j<=(m+n)-1;j++)
 	{
 		printf("  %d  ",c[j]);
 	}
 
 	return 0;
 }

program 3:-C program to create a STACK using array data structure and implement the operations PUSH, POP and TRAVESE.
roll no:-23
name :-Jasir Hassan K

#include <stdio.h>  
#include <stdlib.h>  
#define SIZE 4  
int top = -1, array[SIZE];  
void push();  
void pop();  
void traversal();  
int main()  
{  
	int choice;  
	while (1)
	{  
     		printf("\nPerform operations on the stack:");  
        	printf("\n1.Push \n2.Pop \n3.Traversal \n4.End");  
        	printf("\n\nEnter the choice: ");  
        	scanf("%d", &choice);  
        	switch (choice)  
        	{ 
		    case 1:  
			push();  
			break;  
		    case 2:  
			pop();  
		 	break;  
		    case 3:
			traversal();  
			break;  
		    case 4:  
			exit(0);  
		    default:  
			printf("\nInvalid choice!!");
          
		}  
	}  
}  
void push()  
{  
	int x;  
	if (top == SIZE - 1)  
	{  
		printf("\nOverflow!!");  
	}  
	else  
	{  
		printf("\nEnter the element to be added onto the stack: ");  
		scanf("%d", &x);  
		top = top + 1;  
		array[top] = x;
	}  
}  
void pop()  
{  
	if (top == -1)  
	{  
		printf("\nUnderflow!!");  
	}  
	else  
	{  
		printf("\nPopped element: %d", array[top]);  
		top = top - 1;  
	}  
}  
void traversal()  
{  
	if (top == -1)  
	{  
		printf("\nUnderflow!!");  
	}
	else  
	{  
		printf("\nElements present in the stack: \n");  
		for (int i = top; i >= 0; --i)  
		printf("%d\n", array[i]);  
	}  
}

program 4:-C program to create a QUEUE using array data structure and implement the operations ENQUEUE, DEQUEUE and TRAVERSE
roll no:-23
name :-Jasir Hassan K

#include <stdio.h>
#include <stdlib.h>

int front = 0, rear = -1, size = 5, item, arr_queue[5];

void push()
{
	if(rear >= size - 1)
	{
		printf("Overflow\n");
	}
	else
	{
		printf("Enter your Item: ");
		scanf("%d",&item);
		rear++;
		arr_queue[rear] = item;
	}
}

void pop()
{
	if(front > rear)
	{
        	printf("Underflow (Queue is Empty)\n");
	}
        else
	{
        	item = arr_queue[front];
        	printf("Popped item is %d\n", item);
        	front++;
	}
}

void display()
{
	if(front > rear)
	{
        	printf("Queue is Empty\n");
	}
	else 
	{
        	printf("Queue: ");
        	for(int i = front; i <= rear; i++){
        	printf("%d\t", arr_queue[i]);
        }
        printf("\n");
    }
}

int main()
{
	int choice;
	printf("You've got a Queue of Size %d\n", size);
	while(choice != 4)
	{
        	printf("1.Push\t 2.Pop\t 3.Display\t 4.Exit\n");
		scanf("%d", &choice);
		switch(choice)
		{
		    case 1:
			push();
			break;
		    case 2:
			pop();
			break;
		    case 3:
			display();
			break;
		    case 4:
			return 0;
		    default:
			printf("Invalid Choice\n");
			break;
		}
	}
	return 0;
}
